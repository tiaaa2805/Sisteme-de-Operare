#include<stdio.h>
#include<stdint.h>
#include<stdlib.h>
#include<signal.h>
#include<string.h>
#include<error.h>
#include<unistd.h>
#define Max 256
#define MAX 356
struct stringtoValue{
  const char *key;
  int op;
};
struct stringtoValue words[]={
  {"start_monitor",1},
  {"list_hunts",2},
  {"list_treasures",3},
  {"view_treasures",4},
  {"stop_monitor",5},
  {"exit",6}
};

int pp[2];
pid_t monitor_pid=-1;
volatile sig_atomic_t monitor_execution=0;
volatile sig_atomic_t monitor_stop=0;
int command(const char *buff)
{
  int i;
  for(i=0; i<sizeof(words)/sizeof(words[0]);i++)
    if(strcmp(words[i].key,buff)==0)
      return words[i].op;
  return 0;
}
void verificare(int sig)
{int status;
  waitpid(monitor_pid,&status,0);
  monitor_execution=1;
  printf("Exista o problema aici %d", WIFEXITED(status));
}
void sendcommand(const char *cc)
{
   write(pp[1],comprim,strlen(comprim));
      kill(monitor_pid,SIGUSR1);
      close(pp[1]); 
}
int main()
{
  struct sigaction sa;
  sa.sa_handler=verificare;
  sigemptyset(&sa.sa_mask);
  sa.sa_flags=SA_RESTART;
  sigaction(SIGCHLD,&sa,NULL);
  if(pipe(pp)==-1)
    {
      perror("Eroare la pipe !!!");
      exit(1);
    }
  char buff[Max],buff2[Max], comprim[MAX], buf3[70];
  fgets(buff,Max, stdin);
  buff[strcspn(buff, "\n")]='\0';
  if(command(buff)==1)
    {printf("Se verificam daca monitorul este pornit pentru inceput\n");
      if(monitor_execution==1 && monitor_pid==-1 )
	{printf("Monitorul s a oprit!\n");
	  exit(1);
	}
      printf("Monitorul era/este pornit!\n");
      monitor_pid=fork();
      if(monitor_pid<0)
	{
	  perror("Eroare la fork : ");
	  exit(-1); 
	}
      if(monitor_pid==0)
	{
	  dup2(pp[0],0);
	  close(pp[1]);
	  execl("./treasure_manager", "./treasure_manager",NULL);
	  perror("Eroare la execl :");
	  exit(1);
	}
	 else
           {close(pp[1]);
	     printf("Monitorul functioneaza cu acest pid %d\n",monitor_pid);
	   }
    }
  else{
    if(monitor_pid==-1)
      {
	printf("Porneste monitorul pentru inceput!\n");
	exit(1);
      }
  switch(command(buff))
    {
    case 2:printf("S-a optat pentru listarea hunts\n");
      sendcommand("--list_hunts");
      break;
    case 3:printf("S-a optat pentru listarea treasure-urilor\n");
      printf("Introduceti numele huntului \n");
      fgets(buff2,Max,stdin);
      buff2[strcspn(buff2,"\n")]='\0';
      snprintf(comprim, MAX,"--list_treasures %s",buff2);
      sendcommand(comprim);
      break;
    case 4:printf("S-a optat pentru vizualizarea treasure-ului specificat \n");
      printf("Introduceti pentru inceput huunt-ul\n");
      fgets(buff2,Max,stdin);
      buff2[strcspn(buff2,"\n")]='\0';
      printf("Introduceti aum treasure-ul cautat \n");
      fgets(buf3,70,stdin);
      buf3[strcspn(buf3,"\n")]='\0';
      snprintf(comprim, MAX,"--list_treasures %s %s",buff2, buf3);
      sendcommand(comprim);
      break;
    case 5:printf("S-a optat pentru oprirea monitorului \n");
      snprintf(comprim,Max,"--stop_monitor");
      sendcommand(comprim);
      monitor_stop=1;
      break;
    case 6:printf("S-a optat pentru oprirea fortata a procesului\n");
      if(monitor_stop==0)
	printf("Opriti mai intai mnitorul \n");
      else
	break;
      break;
    default:printf("Aceasta comanda este necunoscuta ");
    }
  }
  return 0;
}
